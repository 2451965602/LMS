// Code generated by hertz generator.

package book

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	book "github.com/2451965602/LMS/biz/model/book"
)

// AddBook .
// @router /book/add [POST]
func AddBook(ctx context.Context, c *app.RequestContext) {
	var err error
	var req book.AddBookRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(book.AddBookResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateBook .
// @router /book/update [PUT]
func UpdateBook(ctx context.Context, c *app.RequestContext) {
	var err error
	var req book.UpdateBookRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(book.UpdateBookResponse)

	c.JSON(consts.StatusOK, resp)
}

// DeleteBook .
// @router /book/delete [DELETE]
func DeleteBook(ctx context.Context, c *app.RequestContext) {
	var err error
	var req book.DeleteBookRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(book.DeleteBookResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetBook .
// @router /book/get [GET]
func GetBook(ctx context.Context, c *app.RequestContext) {
	var err error
	var req book.GetBookRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(book.GetBookResponse)

	c.JSON(consts.StatusOK, resp)
}
