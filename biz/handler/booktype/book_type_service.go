// Code generated by hertz generator.

package booktype

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	booktype "github.com/2451965602/LMS/biz/model/booktype"
)

// AddBookType .
// @router /booktype/add [POST]
func AddBookType(ctx context.Context, c *app.RequestContext) {
	var err error
	var req booktype.AddBookTypeRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(booktype.AddBookTypeResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateBookType .
// @router /booktype/update [PUT]
func UpdateBookType(ctx context.Context, c *app.RequestContext) {
	var err error
	var req booktype.UpdateBookTypeRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(booktype.UpdateBookTypeResponse)

	c.JSON(consts.StatusOK, resp)
}

// DeleteBookType .
// @router /booktype/delete [DELETE]
func DeleteBookType(ctx context.Context, c *app.RequestContext) {
	var err error
	var req booktype.DeleteBookTypeRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(booktype.DeleteBookTypeResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetBookType .
// @router /booktype/get [GET]
func GetBookType(ctx context.Context, c *app.RequestContext) {
	var err error
	var req booktype.GetBookTypeRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(booktype.GetBookTypeResponse)

	c.JSON(consts.StatusOK, resp)
}
