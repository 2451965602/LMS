// Code generated by hertz generator.

package borrow

import (
	"context"

	"github.com/2451965602/LMS/biz/pack"
	"github.com/2451965602/LMS/biz/service"

	"github.com/cloudwego/hertz/pkg/app"

	"github.com/2451965602/LMS/biz/model/borrow"
)

// Borrow .
// @router /book/borrow [POST]
func Borrow(ctx context.Context, c *app.RequestContext) {
	var err error
	var req borrow.BorrowRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(borrow.BorrowResponse)

	borrowId, err := service.NewBorrowService(ctx, c).BookBorrow(ctx, req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp.Base = pack.BuildBaseResp(err)
	resp.BorrowID = borrowId
	pack.SendResponse(c, resp)
}

// ReturnBook .
// @router /book/return [POST]
func ReturnBook(ctx context.Context, c *app.RequestContext) {
	var err error
	var req borrow.ReturnRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(borrow.ReturnResponse)

	record, err := service.NewBorrowService(ctx, c).BookReturn(ctx, req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp.Base = pack.BuildBaseResp(err)
	resp.Data = pack.BuildBorrowRecordResp(record)

	pack.SendResponse(c, resp)
}

// Renew .
// @router /book/renew [POST]
func Renew(ctx context.Context, c *app.RequestContext) {
	var err error
	var req borrow.RenewRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(borrow.RenewResponse)

	record, err := service.NewBorrowService(ctx, c).BookRenew(ctx, req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp.Base = pack.BuildBaseResp(err)
	resp.Data = pack.BuildBorrowRecordResp(record)

	pack.SendResponse(c, resp)
}

// GetBorrowRecord .
// @router /book/record [GET]
func GetBorrowRecord(ctx context.Context, c *app.RequestContext) {
	var err error
	var req borrow.GetBorrowRecordRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(borrow.GetBorrowRecordResponse)

	record, total, err := service.NewBorrowService(ctx, c).GetCurrentBorrowRecord(ctx, req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp.Base = pack.BuildBaseResp(err)
	resp.Data = pack.BuildBorrowRecordListResp(record)
	resp.Total = total

	pack.SendResponse(c, resp)
}
