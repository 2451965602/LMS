// Code generated by hertz generator.

package borrow

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	borrow "github.com/2451965602/LMS/biz/model/borrow"
)

// Borrow .
// @router /book/borrow [POST]
func Borrow(ctx context.Context, c *app.RequestContext) {
	var err error
	var req borrow.BorrowRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(borrow.BorrowResponse)

	c.JSON(consts.StatusOK, resp)
}

// ReturnBook .
// @router /book/return [POST]
func ReturnBook(ctx context.Context, c *app.RequestContext) {
	var err error
	var req borrow.ReturnRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(borrow.ReturnResponse)

	c.JSON(consts.StatusOK, resp)
}

// Renew .
// @router /book/renew [POST]
func Renew(ctx context.Context, c *app.RequestContext) {
	var err error
	var req borrow.RenewRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(borrow.RenewResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetBorrowRecord .
// @router /book/record [GET]
func GetBorrowRecord(ctx context.Context, c *app.RequestContext) {
	var err error
	var req borrow.GetBorrowRecordRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(borrow.GetBorrowRecordResponse)

	c.JSON(consts.StatusOK, resp)
}
